<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/composables/src/main/java/com/capiro/composables/dialogs/ListDialogCapiro.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/composables/src/main/java/com/capiro/composables/dialogs/ListDialogCapiro.kt" />
              <option name="originalContent" value="package com.capiro.composables.dialogs&#10;&#10;import android.util.Log&#10;import androidx.annotation.StringRes&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.basicMarquee&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.capiro.composables.theme.GreenCapiro&#10;import getTypography&#10;import com.capiro.composables.R&#10;import com.capiro.composables.athomic_composables.buttons.ButtonCapiro&#10;import com.capiro.composables.theme.GreenSecondCapiro&#10;&#10;@Deprecated(&#10;    message = &quot;Use SimpleListDialogsCapiro&lt;T&gt; instead&quot;,&#10;    replaceWith = ReplaceWith(&quot;SimpleListDialogsCapiro(modifier, titleIdRes, isTheDialogOpenState, allData, onCloseDialogEvent, itemSelectedEvent)&quot;)&#10;)&#10;@Composable&#10;fun ListDialogCapiro(&#10;    modifier: Modifier = Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    isTheDialogOpenState: Boolean,&#10;    allData: Array&lt;String&gt;,&#10;    onCloseDialogEvent: () -&gt; Unit,&#10;    itemSelectedEvent: (String) -&gt; Unit&#10;) {&#10;    // Forward to the new generic implementation (keeps backward compatibility)&#10;    SimpleListDialogsCapiro(&#10;        modifier = modifier,&#10;        titleIdRes = titleIdRes,&#10;        isTheDialogOpenState = isTheDialogOpenState,&#10;        allData = allData,&#10;        onCloseDialogEvent = onCloseDialogEvent,&#10;        itemSelectedEvent = itemSelectedEvent&#10;    )&#10;}&#10;&#10;@Composable&#10;fun &lt;T&gt; SimpleListDialogsCapiro(&#10;    modifier: Modifier = Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    isTheDialogOpenState: Boolean,&#10;    allData: Array&lt;T&gt;,&#10;    onCloseDialogEvent: () -&gt; Unit,&#10;    itemSelectedEvent: (T) -&gt; Unit&#10;) {&#10;    if (isTheDialogOpenState) {&#10;        Dialog(&#10;            onDismissRequest = { onCloseDialogEvent() },&#10;            content = {&#10;                SimpleListDialogLayout(&#10;                    modifier = modifier,&#10;                    titleIdRes = titleIdRes,&#10;                    allData = allData,&#10;                    itemSelectedEvent = {&#10;                        itemSelectedEvent(it)&#10;                        onCloseDialogEvent()&#10;                    },&#10;                    onCloseDialogEvent = { onCloseDialogEvent() }&#10;                )&#10;            })&#10;    }&#10;}&#10;&#10;@Composable&#10;fun &lt;T&gt; SimpleListDialogLayout(&#10;    modifier: Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    allData: Array&lt;T&gt;,&#10;    itemSelectedEvent: (T) -&gt; Unit,&#10;    onCloseDialogEvent: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .background(color = Color.White, RoundedCornerShape(5.dp))&#10;            .padding(16.dp) // Agregamos padding general&#10;    ) {&#10;        // TITLE&#10;        Text(&#10;            text = stringResource(id = titleIdRes),&#10;            style = getTypography().bodyMedium,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center,&#10;            color = GreenCapiro&#10;        )&#10;&#10;        // LIST OF DATA con weight(1f) para expandirse y empujar el botón&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxWidth(),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(allData.size) { index -&gt;&#10;                SimpleItem(allData[index], itemSelectedEvent = { itemSelectedEvent(it) })&#10;            }&#10;        }&#10;&#10;        // BOTÓN ACEPTAR al final&#10;        ButtonCapiro(&#10;            text = &quot;Aceptar&quot;,&#10;            onClick = { onCloseDialogEvent() },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(top = 16.dp) // Espacio entre la lista y el botón&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun &lt;T&gt; SimpleItem(&#10;    item: T,&#10;    itemSelectedEvent: (T) -&gt; Unit,&#10;) {&#10;    val textColor = remember { GreenCapiro }&#10;    val backgroundColor = remember { mutableStateOf(Color.White) }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(44.dp)&#10;            .background(color = backgroundColor.value)&#10;            .padding(horizontal = 24.dp)&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onPress = {&#10;                        backgroundColor.value = GreenSecondCapiro&#10;                        tryAwaitRelease() // Espera a que el usuario suelte el click/tap&#10;                        backgroundColor.value = Color.White // Vuelve al color original&#10;                    },&#10;                    onTap = { itemSelectedEvent(item) }&#10;                )&#10;            },&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            modifier = Modifier.basicMarquee(),&#10;            text = item.toString(),&#10;            color = textColor,&#10;            style = getTypography().bodyMedium&#10;        )&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun ListDialogCapiroPreview() {&#10;    val isOpenDialog = remember { mutableStateOf(false) }&#10;    Button(content = {Text(&quot;Open&quot;)}, onClick = {&#10;        isOpenDialog.value=true&#10;    })&#10;    SimpleListDialogsCapiro(&#10;        modifier = Modifier.height(400.dp),&#10;        titleIdRes = R.string.list_dialog,&#10;        isTheDialogOpenState = isOpenDialog.value,&#10;        allData = arrayOf(&#10;            &quot;1&quot;,&#10;            &quot;2&quot;,&#10;            &quot;3&quot;,&#10;            &quot;4&quot;,&#10;            &quot;5&quot;,&#10;            &quot;6&quot;,&#10;            &quot;7&quot;,&#10;            &quot;8&quot;,&#10;            &quot;9&quot;,&#10;            &quot;10&quot;,&#10;            &quot;11&quot;,&#10;            &quot;12&quot;,&#10;            &quot;13&quot;,&#10;            &quot;14&quot;,&#10;            &quot;15&quot;&#10;        ),&#10;        onCloseDialogEvent = {isOpenDialog.value = false},&#10;        itemSelectedEvent = { Log.d(&quot;qweqe&quot;, it) }&#10;    )&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.capiro.composables.dialogs&#10;&#10;import android.util.Log&#10;import androidx.annotation.StringRes&#10;import androidx.compose.foundation.ExperimentalFoundationApi&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.basicMarquee&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;import com.capiro.composables.theme.GreenCapiro&#10;import getTypography&#10;import com.capiro.composables.R&#10;import com.capiro.composables.athomic_composables.buttons.ButtonCapiro&#10;import com.capiro.composables.theme.GreenSecondCapiro&#10;&#10;@Deprecated(&#10;    message = &quot;Use SimpleListDialogsCapiro&lt;T&gt; instead&quot;,&#10;    replaceWith = ReplaceWith(&quot;SimpleListDialogsCapiro(modifier, titleIdRes, isTheDialogOpenState, allData, onCloseDialogEvent, itemSelectedEvent)&quot;)&#10;)&#10;@Composable&#10;fun ListDialogCapiro(&#10;    modifier: Modifier = Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    isTheDialogOpenState: Boolean,&#10;    allData: Array&lt;String&gt;,&#10;    onCloseDialogEvent: () -&gt; Unit,&#10;    itemSelectedEvent: (String) -&gt; Unit&#10;) {&#10;    // Forward to the new generic implementation (keeps backward compatibility)&#10;    SimpleListDialogsCapiro(&#10;        modifier = modifier,&#10;        titleIdRes = titleIdRes,&#10;        isTheDialogOpenState = isTheDialogOpenState,&#10;        allData = allData,&#10;        onCloseDialogEvent = onCloseDialogEvent,&#10;        itemSelectedEvent = itemSelectedEvent&#10;    )&#10;}&#10;&#10;@Composable&#10;fun &lt;T&gt; SimpleListDialogsCapiro(&#10;    modifier: Modifier = Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    isTheDialogOpenState: Boolean,&#10;    allData: Array&lt;T&gt;,&#10;    onCloseDialogEvent: () -&gt; Unit,&#10;    itemSelectedEvent: (T) -&gt; Unit&#10;) {&#10;    if (isTheDialogOpenState) {&#10;        Dialog(&#10;            onDismissRequest = { onCloseDialogEvent() },&#10;            content = {&#10;                SimpleListDialogLayout(&#10;                    modifier = modifier,&#10;                    titleIdRes = titleIdRes,&#10;                    allData = allData,&#10;                    itemSelectedEvent = {&#10;                        itemSelectedEvent(it)&#10;                        onCloseDialogEvent()&#10;                    },&#10;                    onCloseDialogEvent = { onCloseDialogEvent() }&#10;                )&#10;            })&#10;    }&#10;}&#10;&#10;@Composable&#10;fun &lt;T&gt; SimpleListDialogLayout(&#10;    modifier: Modifier,&#10;    @StringRes titleIdRes: Int,&#10;    allData: Array&lt;T&gt;,&#10;    itemSelectedEvent: (T) -&gt; Unit,&#10;    onCloseDialogEvent: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .background(color = Color.White, RoundedCornerShape(5.dp))&#10;            .padding(16.dp) // Agregamos padding general&#10;    ) {&#10;        // TITLE&#10;        Text(&#10;            text = stringResource(id = titleIdRes),&#10;            style = getTypography().bodyMedium,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            fontWeight = FontWeight.Bold,&#10;            textAlign = TextAlign.Center,&#10;            color = GreenCapiro&#10;        )&#10;&#10;        // LIST OF DATA con weight(1f) para expandirse y empujar el botón&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .weight(1f)&#10;                .fillMaxWidth(),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            items(allData.size) { index -&gt;&#10;                SimpleItem(allData[index], itemSelectedEvent = { itemSelectedEvent(it) })&#10;            }&#10;        }&#10;&#10;        // BOTÓN ACEPTAR al final&#10;        ButtonCapiro(&#10;            text = &quot;Aceptar&quot;,&#10;            onClick = { onCloseDialogEvent() },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(top = 16.dp) // Espacio entre la lista y el botón&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalFoundationApi::class)&#10;@Composable&#10;private fun &lt;T&gt; SimpleItem(&#10;    item: T,&#10;    itemSelectedEvent: (T) -&gt; Unit,&#10;) {&#10;    val textColor = remember { GreenCapiro }&#10;    val backgroundColor = remember { mutableStateOf(Color.White) }&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(44.dp)&#10;            .background(color = backgroundColor.value)&#10;            .padding(horizontal = 24.dp)&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onPress = {&#10;                        backgroundColor.value = GreenSecondCapiro&#10;                        tryAwaitRelease() // Espera a que el usuario suelte el click/tap&#10;                        backgroundColor.value = Color.White // Vuelve al color original&#10;                    },&#10;                    onTap = { itemSelectedEvent(item) }&#10;                )&#10;            },&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            modifier = Modifier.basicMarquee(),&#10;            text = item.toString(),&#10;            color = textColor,&#10;            style = getTypography().bodyMedium&#10;        )&#10;    }&#10;}&#10;&#10;@Preview&#10;@Composable&#10;fun ListDialogCapiroPreview() {&#10;    val isOpenDialog = remember { mutableStateOf(false) }&#10;    Button(content = {Text(&quot;Open&quot;)}, onClick = {&#10;        isOpenDialog.value=true&#10;    })&#10;    SimpleListDialogsCapiro(&#10;        modifier = Modifier.height(400.dp),&#10;        titleIdRes = R.string.list_dialog,&#10;        isTheDialogOpenState = isOpenDialog.value,&#10;        allData = arrayOf(&#10;            &quot;1&quot;,&#10;            &quot;2&quot;,&#10;            &quot;3&quot;,&#10;            &quot;4&quot;,&#10;            &quot;5&quot;,&#10;            &quot;6&quot;,&#10;            &quot;7&quot;,&#10;            &quot;8&quot;,&#10;            &quot;9&quot;,&#10;            &quot;10&quot;,&#10;            &quot;11&quot;,&#10;            &quot;12&quot;,&#10;            &quot;13&quot;,&#10;            &quot;14&quot;,&#10;            &quot;15&quot;&#10;        ),&#10;        onCloseDialogEvent = {isOpenDialog.value = false},&#10;        itemSelectedEvent = { Log.d(&quot;qweqe&quot;, it) }&#10;    )&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>